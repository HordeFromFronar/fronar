<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_turret_gun</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
image_speed = 0;

maxHealth = 5;
hp = maxHealth;
damage = 1;
rate = 1;
range = 3;
evade = 0;
armour = 0;
attacking = 0;
crit = 0;

instance_create(x, y, obj_turret_base);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Firing code
target_melee = instance_nearest(x, y, obj_enemy);
target_ranged = instance_nearest(x, y, obj_enemy_laser);

if (distance_to_object(target_melee) &lt;= distance_to_object(target_ranged)) {
    target = target_melee;
} else {
    target = target_ranged;
}

if (target &amp;&amp; attacking) {    
    sight = 0;
    
    xOrigin = x - (x % 32) + 16;
    yOrigin = y - (y % 32) + 16;
    
    xTarget = target.x - (target.x % 32) + 16;
    yTarget = target.y - (target.y % 32) + 16;
    
    for (i = 1; i &lt; range + 1; i++) {
        offset = i * 32;
        if (lineOfSight(xOrigin, yOrigin, xOrigin + offset, yOrigin, true) &amp;&amp; xTarget == xOrigin + offset &amp;&amp; yTarget == yOrigin) {
            sight = 1;
        }
        if (lineOfSight(xOrigin, yOrigin, xOrigin - offset, yOrigin, true) &amp;&amp; xTarget == xOrigin - offset &amp;&amp; yTarget == yOrigin) {
            sight = 1;
        }
        if (lineOfSight(xOrigin, yOrigin, xOrigin, yOrigin + offset, true) &amp;&amp; xTarget == xOrigin &amp;&amp; yTarget == yOrigin + offset) {
            sight = 1;
        }
        if (lineOfSight(xOrigin, yOrigin, xOrigin, yOrigin - offset, true) &amp;&amp; xTarget == xOrigin &amp;&amp; yTarget == yOrigin - offset) {
            sight = 1;
        }
        for (j = range - i; j &gt; 0; j--) {
            offset2 = j * 32;
            if (lineOfSight(xOrigin, yOrigin, xOrigin + offset, yOrigin + offset2, true) &amp;&amp; xTarget == xOrigin + offset &amp;&amp; yTarget == yOrigin + offset2) {
                sight = 1;
            }
            if (lineOfSight(xOrigin, yOrigin, xOrigin + offset, yOrigin - offset2, true) &amp;&amp; xTarget == xOrigin + offset &amp;&amp; yTarget == yOrigin - offset2) {
                sight = 1;
            }
            if (lineOfSight(xOrigin, yOrigin, xOrigin - offset, yOrigin + offset2, true) &amp;&amp; xTarget == xOrigin - offset &amp;&amp; yTarget == yOrigin + offset2) {
                sight = 1;
            }
            if (lineOfSight(xOrigin, yOrigin, xOrigin - offset, yOrigin - offset2, true) &amp;&amp; xTarget == xOrigin - offset &amp;&amp; yTarget == yOrigin - offset2) {
                sight = 1;
            } 
        }
    }
    if (sight){
        alarm[0] = 30 / rate;
        
        with(instance_create(x,y,obj_bullet)) {
            target_melee = instance_nearest(x, y, obj_enemy);
            target_ranged = instance_nearest(x, y, obj_enemy_laser);
            
            if (distance_to_object(target_melee) &lt;= distance_to_object(target_ranged)) {
                target = target_melee;
            } else {
                target = target_ranged;
            } 
            move_towards_point(target.x,target.y,5); 
        }
    } else {
        target = 0;
        attacking = 0;
    }
} else {
    target = 0;
    attacking = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start auto firing
target_melee = instance_nearest(x, y, obj_enemy);
target_ranged = instance_nearest(x, y, obj_enemy_laser);

if (distance_to_object(target_melee) &lt;= distance_to_object(target_ranged)) {
    target = target_melee;
} else {
    target = target_ranged;
}

if (target &amp;&amp; !attacking) {
    sight = 0;
    
    xOrigin = x - (x % 32) + 16;
    yOrigin = y - (y % 32) + 16;
    
    xTarget = target.x - (target.x % 32) + 16;
    yTarget = target.y - (target.y % 32) + 16;
    
    for (i = 1; i &lt; range + 1; i++) {
        offset = i * 32;
        if (lineOfSight(xOrigin, yOrigin, xOrigin + offset, yOrigin, true) &amp;&amp; xTarget == xOrigin + offset &amp;&amp; yTarget == yOrigin) {
            sight = 1;
        }
        if (lineOfSight(xOrigin, yOrigin, xOrigin - offset, yOrigin, true) &amp;&amp; xTarget == xOrigin - offset &amp;&amp; yTarget == yOrigin) {
            sight = 1;
        }
        if (lineOfSight(xOrigin, yOrigin, xOrigin, yOrigin + offset, true) &amp;&amp; xTarget == xOrigin &amp;&amp; yTarget == yOrigin + offset) {
            sight = 1;
        }
        if (lineOfSight(xOrigin, yOrigin, xOrigin, yOrigin - offset, true) &amp;&amp; xTarget == xOrigin &amp;&amp; yTarget == yOrigin - offset) {
            sight = 1;
        }
        for (j = range - i; j &gt; 0; j--) {
            offset2 = j * 32;
            if (lineOfSight(xOrigin, yOrigin, xOrigin + offset, yOrigin + offset2, true) &amp;&amp; xTarget == xOrigin + offset &amp;&amp; yTarget == yOrigin + offset2) {
                sight = 1;
            }
            if (lineOfSight(xOrigin, yOrigin, xOrigin + offset, yOrigin - offset2, true) &amp;&amp; xTarget == xOrigin + offset &amp;&amp; yTarget == yOrigin - offset2) {
                sight = 1;
            }
            if (lineOfSight(xOrigin, yOrigin, xOrigin - offset, yOrigin + offset2, true) &amp;&amp; xTarget == xOrigin - offset &amp;&amp; yTarget == yOrigin + offset2) {
                sight = 1;
            }
            if (lineOfSight(xOrigin, yOrigin, xOrigin - offset, yOrigin - offset2, true) &amp;&amp; xTarget == xOrigin - offset &amp;&amp; yTarget == yOrigin - offset2) {
                sight = 1;
            } 
        }
    }
    if (sight){
        attacking = 1;
        alarm[0] = 30 / rate;
        
        orientation = point_direction(x, y, target.x, target.y);
        image_angle = orientation;
        
        with(instance_create(x,y,obj_bullet)) {
            target_melee = instance_nearest(x, y, obj_enemy);
            target_ranged = instance_nearest(x, y, obj_enemy_laser);
            
            if (distance_to_object(target_melee) &lt;= distance_to_object(target_ranged)) {
                target = target_melee;
            } else {
                target = target_ranged;
            }
 
            move_towards_point(target.x,target.y,5); 
        }
    } else {
        target = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set orientation
if (target) {
    if (instance_exists(target)) {
        orientation = point_direction(x, y, target.x, target.y);
        image_angle = orientation;
        image_index = 1;
    }
} else {
    image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Health management

if (hp &lt;= 0) {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw health bar
if (hp &lt; maxHealth) {
    hpDisplay = round((hp/maxHealth) * 100);

    draw_healthbar(x - 8, y + 5, x + 8, y - 5, hpDisplay, c_black, c_red, c_lime, 0, true, true)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
