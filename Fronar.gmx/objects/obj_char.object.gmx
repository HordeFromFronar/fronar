<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_char</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables
image_speed = 0;
charID = 0;
assignChar();
xDest = x;
yDest = y;
target = 0;
attacking = 0;
sight = 0;
buildOrder = 0;
xBuild = 0;
yBuild = 0;
path = path_add();

healing = false;
healedAmount = 0;

//Initialize character info
gender = ds_list_find_value(ds_list_find_value(global.charList, charID),0);
first = ds_list_find_value(ds_list_find_value(global.charList, charID),1);
last = ds_list_find_value(ds_list_find_value(global.charList, charID),2);
age = ds_list_find_value(ds_list_find_value(global.charList, charID),3);
occupation = ds_list_find_value(ds_list_find_value(global.charList, charID),4);
interest = ds_list_find_value(ds_list_find_value(global.charList, charID),5);
maxHealth = ds_list_find_value(ds_list_find_value(global.charList, charID),6);
hp = ds_list_find_value(ds_list_find_value(global.charList, charID),7);
portraitId = ds_list_find_value(ds_list_find_value(global.charList, charID),8);
range = ds_list_find_value(ds_list_find_value(global.charList, charID),9);
moveSpeed = ds_list_find_value(ds_list_find_value(global.charList, charID),10);
damage = ds_list_find_value(ds_list_find_value(global.charList, charID), 11);
rate = ds_list_find_value(ds_list_find_value(global.charList, charID),12);
armour = ds_list_find_value(ds_list_find_value(global.charList, charID),13);
evade = ds_list_find_value(ds_list_find_value(global.charList, charID),14);
crit = ds_list_find_value(ds_list_find_value(global.charList, charID),15);
class = ds_list_find_value(ds_list_find_value(global.charList, charID),16);


image_index = portraitId;

//Each character requires its own grid for collision reasons.
p_gridSize = 16;
p_grid = mp_grid_create(-8,-8,round(room_width/p_gridSize) + 10,
                        round(room_height/p_gridSize) + 10,p_gridSize,p_gridSize)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Firing code

if (!global.tacPause) {
    target_melee = instance_nearest(x, y, obj_enemy);
    
    nearest_laser = instance_nearest(x, y, obj_enemy_laser);
    nearest_tank = instance_nearest(x, y, obj_enemy_tank);
    
    if (point_distance(x, y, nearest_laser.x, nearest_laser.y) &lt; 
        point_distance(x, y, nearest_tank.x, nearest_tank.y)){
        target_ranged = instance_nearest(x, y, obj_enemy_laser);
    } else {
        target_ranged = instance_nearest(x, y, obj_enemy_tank);
    }
    
    
    if (distance_to_object(target_melee) &lt;= distance_to_object(target_ranged)) {
        target = target_melee;
    } else {
        target = target_ranged;
    }
    
    if (target &amp;&amp; attacking) {    
        sight = 0;
        
        xOrigin = x - (x % 32) + 16;
        yOrigin = y - (y % 32) + 16;
        
        xTarget = target.x - (target.x % 32) + 16;
        yTarget = target.y - (target.y % 32) + 16;
        
        for (i = 1; i &lt; range + 1; i++) {
            offset = i * 32;
            if (lineOfSight(xOrigin, yOrigin, xOrigin + offset, yOrigin, true) &amp;&amp; xTarget == xOrigin + offset &amp;&amp; yTarget == yOrigin) {
                sight = 1;
            }
            if (lineOfSight(xOrigin, yOrigin, xOrigin - offset, yOrigin, true) &amp;&amp; xTarget == xOrigin - offset &amp;&amp; yTarget == yOrigin) {
                sight = 1;
            }
            if (lineOfSight(xOrigin, yOrigin, xOrigin, yOrigin + offset, true) &amp;&amp; xTarget == xOrigin &amp;&amp; yTarget == yOrigin + offset) {
                sight = 1;
            }
            if (lineOfSight(xOrigin, yOrigin, xOrigin, yOrigin - offset, true) &amp;&amp; xTarget == xOrigin &amp;&amp; yTarget == yOrigin - offset) {
                sight = 1;
            }
            for (j = range - i; j &gt; 0; j--) {
                offset2 = j * 32;
                if (lineOfSight(xOrigin, yOrigin, xOrigin + offset, yOrigin + offset2, true) &amp;&amp; xTarget == xOrigin + offset &amp;&amp; yTarget == yOrigin + offset2) {
                    sight = 1;
                }
                if (lineOfSight(xOrigin, yOrigin, xOrigin + offset, yOrigin - offset2, true) &amp;&amp; xTarget == xOrigin + offset &amp;&amp; yTarget == yOrigin - offset2) {
                    sight = 1;
                }
                if (lineOfSight(xOrigin, yOrigin, xOrigin - offset, yOrigin + offset2, true) &amp;&amp; xTarget == xOrigin - offset &amp;&amp; yTarget == yOrigin + offset2) {
                    sight = 1;
                }
                if (lineOfSight(xOrigin, yOrigin, xOrigin - offset, yOrigin - offset2, true) &amp;&amp; xTarget == xOrigin - offset &amp;&amp; yTarget == yOrigin - offset2) {
                    sight = 1;
                } 
            }
        }
        if (sight){
            alarm[0] = 30 / rate;
            
            bullet = obj_bullet_fronar;
            if (class == "Grenadier") {
                bullet = obj_grenade;
            }
            
            with(instance_create(x,y,bullet)) {
                target_melee = instance_nearest(x, y, obj_enemy);
    
                nearest_laser = instance_nearest(x, y, obj_enemy_laser);
                nearest_tank = instance_nearest(x, y, obj_enemy_tank);
    
                if (point_distance(x, y, nearest_laser.x, nearest_laser.y) &lt; 
                    point_distance(x, y, nearest_tank.x, nearest_tank.y)){
                    target_ranged = instance_nearest(x, y, obj_enemy_laser);
                } else {
                    target_ranged = instance_nearest(x, y, obj_enemy_tank);
                }
                
                if (distance_to_object(target_melee) &lt;= distance_to_object(target_ranged)) {
                    target = target_melee;
                } else {
                    target = target_ranged;
                } 
                move_towards_point(target.x,target.y,5); 
            }
        } else {
            target = 0;
            attacking = 0;
        }
    } else {
        target = 0;
        attacking = 0;
    }
} else {
    alarm[0] = 30 / rate;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pathfinding Player
if (!global.tacPause) {
    // Add collision to other players
    var i;
    for (i = 0; i &lt; instance_number(obj_char); ++i) {
        player_id = instance_find(obj_char, i)
        if (player_id != id) {
            mp_grid_add_instances(p_grid, player_id, false);
        }
    }
    
    // Add collision detection to enemies, and walls
    mp_grid_add_instances(p_grid, obj_enemy, false);
    mp_grid_add_instances(p_grid, obj_enemy_laser, false);
    mp_grid_add_instances(p_grid, obj_wall_inner, false);
    mp_grid_add_instances(p_grid, obj_wall_outer, false);
    mp_grid_add_instances(p_grid, obj_wall_window, false);
    mp_grid_add_instances(p_grid, obj_crate_fronar, false);
    mp_grid_add_instances(p_grid, obj_turret, false);
    mp_grid_add_instances(p_grid, obj_barricade, false);
    
    // Move towards the dest
    if (x != xDest || y != yDest) {
        path_delete(path);
        path = path_add();
        if (mp_grid_path(p_grid, path, x, y, xDest, yDest, true)) {
            path_start(path, moveSpeed, 0, true);
            //image_angle = point_direction(x, y, xDest, yDest);
            //image_angle = direction;
        } else if (instance_place(x, y, obj_enemy) != noone || instance_place(x, y, obj_enemy_laser) != noone) {
            // Check the odd case that we do end up on an enemy, and get stuck
            mp_grid_clear_all(p_grid);
            mp_grid_add_instances(p_grid, obj_wall_inner, false);
            mp_grid_add_instances(p_grid, obj_wall_outer, false);
            var i;
            for (i = 0; i &lt; instance_number(obj_char); ++i) {
                player_id = instance_find(obj_char, i)
                if (player_id != id) {
                    mp_grid_add_instances(p_grid, player_id, false);
                }
            }
            path = path_add();
            if (mp_grid_path(p_grid, path, x, y, xDest, yDest, true)) {
                path_start(path, moveSpeed, 0, true);
            }
        }
    }
    
    mp_grid_clear_all(p_grid)
}
else {
    path_end();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start auto firing
if (!healing &amp;&amp; !global.tacPause) {

    target_melee = instance_nearest(x, y, obj_enemy);
    
    nearest_laser = instance_nearest(x, y, obj_enemy_laser);
    nearest_tank = instance_nearest(x, y, obj_enemy_tank);
    
    if (point_distance(x, y, nearest_laser.x, nearest_laser.y) &lt; 
        point_distance(x, y, nearest_tank.x, nearest_tank.y)){
        target_ranged = instance_nearest(x, y, obj_enemy_laser);
    } else {
        target_ranged = instance_nearest(x, y, obj_enemy_tank);
    }
    
    if (distance_to_object(target_melee) &lt;= distance_to_object(target_ranged)) {
        target = target_melee;
    } else {
        target = target_ranged;
    }
    
    if (target &amp;&amp; !attacking) {
        sight = 0;
        
        xOrigin = x - (x % 32) + 16;
        yOrigin = y - (y % 32) + 16;
        
        xTarget = target.x - (target.x % 32) + 16;
        yTarget = target.y - (target.y % 32) + 16;
        
        for (i = 1; i &lt; range + 1; i++) {
            offset = i * 32;
            if (lineOfSight(xOrigin, yOrigin, xOrigin + offset, yOrigin, true) &amp;&amp; xTarget == xOrigin + offset &amp;&amp; yTarget == yOrigin) {
                sight = 1;
            }
            if (lineOfSight(xOrigin, yOrigin, xOrigin - offset, yOrigin, true) &amp;&amp; xTarget == xOrigin - offset &amp;&amp; yTarget == yOrigin) {
                sight = 1;
            }
            if (lineOfSight(xOrigin, yOrigin, xOrigin, yOrigin + offset, true) &amp;&amp; xTarget == xOrigin &amp;&amp; yTarget == yOrigin + offset) {
                sight = 1;
            }
            if (lineOfSight(xOrigin, yOrigin, xOrigin, yOrigin - offset, true) &amp;&amp; xTarget == xOrigin &amp;&amp; yTarget == yOrigin - offset) {
                sight = 1;
            }
            for (j = range - i; j &gt; 0; j--) {
                offset2 = j * 32;
                if (lineOfSight(xOrigin, yOrigin, xOrigin + offset, yOrigin + offset2, true) &amp;&amp; xTarget == xOrigin + offset &amp;&amp; yTarget == yOrigin + offset2) {
                    sight = 1;
                }
                if (lineOfSight(xOrigin, yOrigin, xOrigin + offset, yOrigin - offset2, true) &amp;&amp; xTarget == xOrigin + offset &amp;&amp; yTarget == yOrigin - offset2) {
                    sight = 1;
                }
                if (lineOfSight(xOrigin, yOrigin, xOrigin - offset, yOrigin + offset2, true) &amp;&amp; xTarget == xOrigin - offset &amp;&amp; yTarget == yOrigin + offset2) {
                    sight = 1;
                }
                if (lineOfSight(xOrigin, yOrigin, xOrigin - offset, yOrigin - offset2, true) &amp;&amp; xTarget == xOrigin - offset &amp;&amp; yTarget == yOrigin - offset2) {
                    sight = 1;
                } 
            }
        }
        if (sight){
            attacking = 1;
            alarm[0] = 30 / rate;
            
            orientation = point_direction(x, y, target.x, target.y);
            image_angle = orientation;
            
            bullet = obj_bullet_fronar;
            if (class == "Grenadier") {
                bullet = obj_grenade;
            }
            
            with(instance_create(x,y,bullet)) {
                target_melee = instance_nearest(x, y, obj_enemy);
                
                nearest_laser = instance_nearest(x, y, obj_enemy_laser);
                nearest_tank = instance_nearest(x, y, obj_enemy_tank);
    
                if (point_distance(x, y, nearest_laser.x, nearest_laser.y) &lt; 
                    point_distance(x, y, nearest_tank.x, nearest_tank.y)){
                    target_ranged = instance_nearest(x, y, obj_enemy_laser);
                } else {
                    target_ranged = instance_nearest(x, y, obj_enemy_tank);
                }
                
                if (distance_to_object(target_melee) &lt;= distance_to_object(target_ranged)) {
                    target = target_melee;
                } else {
                    target = target_ranged;
                }
     
                move_towards_point(target.x,target.y,5); 
            }
        } else {
            target = 0;
        }
    }

}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Health management

//p.s. this is doug. you guys are doing great work, love y'all
//ds_list_replace(ds_list_find_value(global.charList, charID),8, hp);

if (hp &lt;= 0) {
    if (global.selected = id) {
        global.selected = 0;
    }

    instance_destroy();
}

if (healing) {
    heal = 1 / room_speed;

    effect_create_above(ef_spark, x-16 + random(32), y-16 + random(32), choose(0, 1), 
                        merge_colour(c_white, c_aqua, random(1)));
    hp += heal;
    healedAmount += heal;
    if hp &gt;= maxHealth {
        hp = maxHealth
        healing = false;   
        healedAmount = 0;
    } else if (healedAmount == 10) {
        healing = false;
        healedAmount = 0;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set orientation
if (target) {
    if (instance_exists(target)) {
        orientation = point_direction(x, y, target.x, target.y);
        image_angle = orientation;
    }
} else {
    image_angle = direction;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Build handling
if (buildOrder &amp;&amp; ds_list_find_value(global.resourceList, 0) &gt;= obj_resources.turretCost) {
    dir = 0;
    
    xDest = xBuild;
    yDest = yBuild;
    
    dist = 1000000;
    
    possible = 1;
    
    if (lineOfSight(xBuild + 32, yBuild, xBuild, yBuild, false)) {
        if (point_distance(xBuild + 32, yBuild, x, y) &lt; dist &amp;&amp;
            place_free(xBuild + 32, yBuild)) {
            dir = 1;
            dist = point_distance(xBuild + 32, yBuild, x, y);
        }
    }
    if (lineOfSight(xBuild - 32, yBuild, xBuild, yBuild, false)) {
        if (point_distance(xBuild - 32, yBuild, x, y) &lt; dist &amp;&amp;
            place_free(xBuild - 32, yBuild)) {
            dir = 2;
            dist = point_distance(xBuild - 32, yBuild, x, y);
        }
    }
    if (lineOfSight(xBuild, yBuild + 32, xBuild, yBuild, false)) {
        if (point_distance(xBuild, yBuild + 32, x, y) &lt; dist &amp;&amp;
            place_free(xBuild, yBuild + 32)) {
            dir = 3;
            dist = point_distance(xBuild, yBuild + 32, x, y);
        }
    }
    if (lineOfSight(xBuild, yBuild - 32, xBuild, yBuild, false)) {
        if (point_distance(xBuild, yBuild - 32, x, y) &lt; dist &amp;&amp;
            place_free(xBuild, yBuild -32)) {
            dir = 4;
            dist = point_distance(xBuild, yBuild - 32, x, y);
        }
    }
    
    switch (dir) {
        case 1:
            xDest += 32;
            break;
        case 2:
            xDest -= 32;
            break;
        case 3:
            yDest += 32;
            break;
        case 4:
            yDest -= 32;
            break;
        case 0:
            possible = 0;
            break;
    }
    
    if (!possible || !place_free(xBuild, yBuild)) {
        xDest = x;
        yDest = y;
        buildOrder = 0;
    }
} else {
    buildOrder = 0;
}

if (x == xDest &amp;&amp; y == yDest &amp;&amp; buildOrder) {
    switch (buildOrder) {
        case 1:
            if (ds_list_find_value(global.resourceList, 0) &gt;= obj_resources.turretCost) {
                instance_create(xBuild, yBuild, obj_turret);
                ds_list_replace(global.resourceList, 0, ds_list_find_value(global.resourceList, 0) - obj_resources.turretCost);
            }
            break;
        case 2:
            if (ds_list_find_value(global.resourceList, 0) &gt;= obj_resources.barricadeCost) {
                instance_create(xBuild, yBuild, obj_barricade);
                ds_list_replace(global.resourceList, 0, ds_list_find_value(global.resourceList, 0) - obj_resources.barricadeCost);
            }
            break;
        case 3:
            if (ds_list_find_value(global.resourceList, 0) &gt;= obj_resources.empCost) {
                instance_create(xBuild, yBuild, obj_emp);
                ds_list_replace(global.resourceList, 0, ds_list_find_value(global.resourceList, 0) - obj_resources.empCost);
            }
            break;        
    }
    buildOrder = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Select call

select(id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw health bar
if (hp &lt; maxHealth) {
    hpDisplay = round((hp/maxHealth) * 100);

    draw_healthbar(x - 6, y + 3, x + 6, y - 3, hpDisplay, c_black, c_red, c_lime, 0, true, true)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//highlightRange();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//unHighlightRange();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
