<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Functional UI
xmax = 1280;
ymax = 720;
selected = 0;

depth = -5;

//Draw top right corner buttons
instance_create(xmax - 48, y + 16, obj_button_menu);
instance_create(xmax - 48, y + 64, obj_button_tactical);

//Draw character stat icons
damage = instance_create(xmax - 96 - ds_list_size(charList), 50, obj_icon_damage); 
defense = instance_create(xmax - 96 - ds_list_size(charList), 82, obj_icon_defense); 
movespeed = instance_create(xmax - 96 - ds_list_size(charList), 114, obj_icon_speed); 
atkspeed = instance_create(xmax - 96 - ds_list_size(charList), 146, obj_icon_atkspd); 

//Draw bottom right corner buttons
instance_create(1152, 512, obj_button_medkit);
instance_create(1088, 512, obj_button_turret);
instance_create(1088, 576, obj_button_barricade);
instance_create(1216, 640, obj_button_emp);
instance_create(1152, 640, obj_button_oil);

//Draw Top Left Icons
instance_create(32, 32, obj_icon_food);
instance_create(32, 80, obj_icon_parts);
instance_create(32, 128, obj_icon_medkit);

//Draw Character Portraits and stats
i = 0;
portrait_x = xmax - 64;
for (i = 0; i &lt; ds_list_size(global.charList); ++i){
    char = ds_list_find_value(global.charList, i);
    //Draw portraits from right to left
    //Only draw portraits for characters who are alive
    if(ds_list_find_value(char, 7) &gt; 0){
        portrait_x -= 50;
        var portrait = instance_create(portrait_x, 0, obj_small_portrait);
        portrait.charId = i;
        portrait.image_index = ds_list_find_value(char, 8) mod 4;
        //draw_sprite(spr_sm_portrait, 
        //ds_list_find_value(char, 8) mod 4, 
        //portrait_x, 0); 
    }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Decorative UI
//This is for drawing any information that the player does not interact with
//Eg portraits, stats, etc.
//For functional ui (buttons, etc), spawn instances in this object's create event

//draw_set_font(ArcadeClassic);
draw_set_color(c_white);


//Draw Character Stats
i = 0;
portrait_x = xmax - 64;
for (i = 0; i &lt; ds_list_size(global.charList); ++i){
    char = ds_list_find_value(global.charList, i);
    if (ds_list_find_value(char, 7) &gt; 0) {
        //Draw stats from right to left
        //Only draw stats for characters who are alive
        portrait_x -= 50;
          
        draw_text_transformed(portrait_x, 50, string(ds_list_find_value(char, 11)), 2, 2, 0);
        draw_text_transformed(portrait_x, 82, string(ds_list_find_value(char, 13)), 2, 2, 0);
        draw_text_transformed(portrait_x, 114, string(10*ds_list_find_value(char, 10)), 2, 2, 0);
        draw_text_transformed(portrait_x, 146, string(10*ds_list_find_value(char, 12)), 2, 2, 0);
        
        if(selected &amp;&amp; i == selected.charID){
            //show_debug_message(string(i) + " is selected");
            //olddepth = depth;
            depth = -15;
            draw_set_color(c_gray);
            draw_rectangle(portrait_x, 0, portrait_x + 50, 49, true);
            //draw_rectangle(0,0,50,50,true);
            draw_set_color(c_white);
           //depth = olddepth;
        }
    }
}

//Draw Resource Totals
draw_text_transformed(80, 32, string(ds_list_find_value(global.resourceList, 2)), 2, 2, 0);
draw_text_transformed(80, 80, string(ds_list_find_value(global.resourceList, 0)), 2, 2, 0);
draw_text_transformed(80, 128, string(ds_list_find_value(global.resourceList, 1)), 2, 2, 0);

damage.x = portrait_x - 32;
defense.x = portrait_x - 32;
movespeed.x = portrait_x - 32;
atkspeed.x = portrait_x - 32;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
