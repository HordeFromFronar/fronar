<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enemy_laser</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init

//Initialize variables
moveSpeed = 1;
xDest = x;
yDest = y;
arrived = false;
hp = 10;
rate = 1;
range = 3;
attacking = 0;
damage = 1;
laser = 0;
armour = 0;
evade = 0;
crit = 0;
target = 0;

//Each enemy requires its own grid for collision reasons.
e_gridSize = 16;
e_grid = mp_grid_create(-8,-8,round(room_width/e_gridSize),
                        round(room_height/e_gridSize),e_gridSize,e_gridSize);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End attack animation
laser = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attacking
target = instance_nearest(x, y, obj_char);

if (target &amp;&amp; attacking) {
    sight = 0;
    
    xTarget = target.x - (target.x % 32) + 16;
    yTarget = target.y - (target.y % 32) + 16;
    
    for (i = 1; i &lt; range + 1; i++) {
        offset = i * 32;
        if (lineOfSight(x, y, x + offset, y) &amp;&amp; xTarget == x + offset &amp;&amp; yTarget == y) {
            sight = 1;
        }
        if (lineOfSight(x, y, x - offset, y) &amp;&amp; xTarget == x - offset &amp;&amp; yTarget == y) {
            sight = 1;
        }
        if (lineOfSight(x, y, x, y + offset) &amp;&amp; xTarget == x &amp;&amp; yTarget == y + offset) {
            sight = 1;
        }
        if (lineOfSight(x, y, x, y - offset) &amp;&amp; xTarget == x &amp;&amp; yTarget == y - offset) {
            sight = 1;
        }
        for (j = range - i; j &gt; 0; j--) {
            offset2 = j * 32;
            if (lineOfSight(x, y, x + offset, y + offset2) &amp;&amp; xTarget == x + offset &amp;&amp; yTarget == y + offset2) {
                sight = 1;
            }
            if (lineOfSight(x, y, x + offset, y - offset2) &amp;&amp; xTarget == x + offset &amp;&amp; yTarget == y - offset2) {
                sight = 1;
            }
            if (lineOfSight(x, y, x - offset, y + offset2) &amp;&amp; xTarget == x - offset &amp;&amp; yTarget == y + offset2) {
                sight = 1;
            }
            if (lineOfSight(x, y, x - offset, y - offset2) &amp;&amp; xTarget == x - offset &amp;&amp; yTarget == y - offset2) {
                sight = 1;
            } 
        }
    }
    if (sight){
        attacking = 1;
        alarm[0] = 30 / rate;
        laser = 1;
        alarm[1] = 5;
        
        damageObj(target,id);
    } else {
        attacking = 0;
    }
} else {
    attacking = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pathfinding Enemy

// Determine the closest player
var closest = instance_nearest(x, y, obj_char);

// Add collision detection to all other enemies
var i;
for (i = 0; i &lt; instance_number(obj_enemy_laser); ++i) {
    enemy_id = instance_find(obj_enemy_laser, i);
    if (enemy_id != id) {
        mp_grid_add_instances(e_grid, enemy_id, false);
    }
}
// Add collision detection to players, and walls
// mp_grid_add_instances(e_grid, obj_char, false)
mp_grid_add_instances(e_grid, obj_enemy, false);
mp_grid_add_instances(e_grid, obj_wall_inner, false);
mp_grid_add_instances(e_grid, obj_wall_outer, false);

// Set xDest and yDest to closest available cell by character's x and y
/*if mp_grid_get_cell(e_grid, closest.x + 32, closest.y + 32) == 0 {
    xDest = closest.x + 32; yDest = closest.y + 32;    
} else if mp_grid_get_cell(e_grid, closest.x + 32, closest.y) == 0 {
    xDest = closest.x + 32; yDest = closest.y;
} else if mp_grid_get_cell(e_grid, (closest.x div 32) + 1, (closest.y div 32) - 1) == 0 {
    xDest = closest.x + 32; yDest = closest.y - 32;
} else if mp_grid_get_cell(e_grid, (closest.x div 32), (closest.y div 32) - 1) == 0 {
    xDest = closest.x; yDest = closest.y - 32;    
} else if mp_grid_get_cell(e_grid, (closest.x div 32) - 1, (closest.y div 32) - 1) == 0 {
    xDest = closest.x - 32; yDest = closest.y - 32;
} else if mp_grid_get_cell(e_grid, (closest.x div 32) - 1, (closest.y div 32)) == 0 {
    xDest = closest.x - 32; yDest = closest.y;
} else if mp_grid_get_cell(e_grid, (closest.x div 32) - 1, (closest.y div 32) + 1) == 0 {
    xDest = closest.x - 32; yDest = closest.y + 32;    
} else if mp_grid_get_cell(e_grid, (closest.x div 32), (closest.y div 32) + 1) == 0 {
    xDest = closest.x; yDest = closest.y + 32;
} else {
    xDest = closest.x; yDest = closest.y;
}*/

xDest = closest.x; yDest = closest.y;

//path = path_end();

// Move towards the nearest player
if (x != xDest || y != yDest) {
    // If we're close enough to the player, kill the path so
    // the enemy doesn't walk into the player.
    padding = 32;
    if (abs(x - xDest) &lt;= padding &amp;&amp; abs(y - yDest) &lt;= padding) {
        xDest = x; yDest = y;
        path = path_end();
    // Otherwise keep path finding the optimal path to the player
    } else {
        path = path_add();
        if (mp_grid_path(e_grid, path, x, y, xDest, yDest, true)) {
            path_start(path, moveSpeed, 0, true);
        } else if (instance_place(x, y, obj_enemy) != noone || instance_place(x, y, obj_enemy_laser) != noone) {
            // Check the odd case that we do end up on another enemy, and get stuck
            mp_grid_clear_all(e_grid);
            mp_grid_add_instances(e_grid, obj_wall_inner, false);
            mp_grid_add_instances(e_grid, obj_wall_outer, false);
            xDest = x + random(padding) - random(padding);
            yDest = y + random(padding) - random(padding);
            path = path_add();
            if (mp_grid_path(e_grid, path, x, y, xDest, yDest, true)) {
                path_start(path, moveSpeed, 0, true);    
            }
        }
    }
    move_snap(16, 16)
}

// Look at the player
image_angle = point_direction(x, y, closest.x, closest.y);

// Clear collision detection so the old cells aren't marked
mp_grid_clear_all(e_grid);


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start Attacking
target = instance_nearest(x, y, obj_char);

if (target &amp;&amp; !attacking) {
    sight = 0;
    
    xTarget = target.x - (target.x % 32) + 16;
    yTarget = target.y - (target.y % 32) + 16;
    
    for (i = 1; i &lt; range + 1; i++) {
        offset = i * 32;
        if (lineOfSight(x, y, x + offset, y) &amp;&amp; xTarget == x + offset &amp;&amp; yTarget == y) {
            sight = 1;
        }
        if (lineOfSight(x, y, x - offset, y) &amp;&amp; xTarget == x - offset &amp;&amp; yTarget == y) {
            sight = 1;
        }
        if (lineOfSight(x, y, x, y + offset) &amp;&amp; xTarget == x &amp;&amp; yTarget == y + offset) {
            sight = 1;
        }
        if (lineOfSight(x, y, x, y - offset) &amp;&amp; xTarget == x &amp;&amp; yTarget == y - offset) {
            sight = 1;
        }
        for (j = range - i; j &gt; 0; j--) {
            offset2 = j * 32;
            if (lineOfSight(x, y, x + offset, y + offset2) &amp;&amp; xTarget == x + offset &amp;&amp; yTarget == y + offset2) {
                sight = 1;
            }
            if (lineOfSight(x, y, x + offset, y - offset2) &amp;&amp; xTarget == x + offset &amp;&amp; yTarget == y - offset2) {
                sight = 1;
            }
            if (lineOfSight(x, y, x - offset, y + offset2) &amp;&amp; xTarget == x - offset &amp;&amp; yTarget == y + offset2) {
                sight = 1;
            }
            if (lineOfSight(x, y, x - offset, y - offset2) &amp;&amp; xTarget == x - offset &amp;&amp; yTarget == y - offset2) {
                sight = 1;
            } 
        }
    }
    if (sight){
        attacking = 1;
        alarm[0] = 30 / rate;
        laser = 1;
        alarm[1] = 5;
        
        damageObj(target,id);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Health management
if (hp == 0) {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw laser
if (laser) {
    draw_set_color(c_red);
    draw_line(x,y,target.x,target.y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
