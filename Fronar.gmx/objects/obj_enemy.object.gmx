<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enemy</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_enemy</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init

//Initialize variables
image_speed = 0;
moveSpeed = 1;
xDest = x;
yDest = y;
arrived = false;
maxHealth = 8;
hp = maxHealth;
rate = 1;
attacking = 0;
damage = 1;
armour = 0;
evade = 0;
crit = 0;
ignoreSight = 0;
target = 0;

//Each enemy requires its own grid for collision reasons.
e_gridSize = 16;
e_grid = mp_grid_create(-40,-40,round(room_width/e_gridSize) + 6,
                        round(room_height/e_gridSize) + 6,e_gridSize,e_gridSize);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End attack animation
image_index = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attacking
ignoreSight = 0;

getPriority(id);

if (target &amp;&amp; attacking) {
    if (x == xDest &amp;&amp; y == yDest &amp;&amp; (lineOfSight(x, y, target.x, target.y, false) || ignoreSight)) {
        alarm[0] = 30 / rate;
        
        damageObj(target,id);
        
        image_index = 1;    
        alarm[1] = 5;  
    } else {
        attacking = 0;
        target = 0;
    }
} else {
    attacking = 0;
    target = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pathfinding Enemy

padding = 32;

// Determine the closest target
getPriority(id);

closest = target;

// Add collision detection to all other enemies
var i;
for (i = 0; i &lt; instance_number(obj_enemy); ++i) {
    enemy_id = instance_find(obj_enemy, i);
    if (enemy_id != id) {
        mp_grid_add_instances(e_grid, enemy_id, false);
    }
}
// Add collision detection to players, and walls
// mp_grid_add_instances(e_grid, obj_char, false)
mp_grid_add_instances(e_grid, obj_enemy_laser, false);
mp_grid_add_instances(e_grid, obj_wall_inner, false);
mp_grid_add_instances(e_grid, obj_wall_outer, false);
mp_grid_add_instances(e_grid, obj_wall_window, false);

// Set xDest and yDest to closest available cell by character's x and y
/*if mp_grid_get_cell(e_grid, closest.x + 32, closest.y + 32) == 0 {
    xDest = closest.x + 32; yDest = closest.y + 32;    
} else if mp_grid_get_cell(e_grid, closest.x + 32, closest.y) == 0 {
    xDest = closest.x + 32; yDest = closest.y;
} else if mp_grid_get_cell(e_grid, (closest.x div 32) + 1, (closest.y div 32) - 1) == 0 {
    xDest = closest.x + 32; yDest = closest.y - 32;
} else if mp_grid_get_cell(e_grid, (closest.x div 32), (closest.y div 32) - 1) == 0 {
    xDest = closest.x; yDest = closest.y - 32;    
} else if mp_grid_get_cell(e_grid, (closest.x div 32) - 1, (closest.y div 32) - 1) == 0 {
    xDest = closest.x - 32; yDest = closest.y - 32;
} else if mp_grid_get_cell(e_grid, (closest.x div 32) - 1, (closest.y div 32)) == 0 {
    xDest = closest.x - 32; yDest = closest.y;
} else if mp_grid_get_cell(e_grid, (closest.x div 32) - 1, (closest.y div 32) + 1) == 0 {
    xDest = closest.x - 32; yDest = closest.y + 32;    
} else if mp_grid_get_cell(e_grid, (closest.x div 32), (closest.y div 32) + 1) == 0 {
    xDest = closest.x; yDest = closest.y + 32;
} else {
    xDest = closest.x; yDest = closest.y;
}*/

xDest = closest.x; yDest = closest.y;

//path = path_end();

// Move towards the nearest player
if (x != xDest || y != yDest) {
    // If we're close enough to the player, kill the path so
    // the enemy doesn't walk into the player.
    if (abs(x - xDest) &lt;= padding &amp;&amp; abs(y - yDest) &lt;= padding) {
        xDest = x; yDest = y;
        path = path_end();
    // Otherwise keep path finding the optimal path to the player
    } else {
        path = path_add();
        if (mp_grid_path(e_grid, path, x, y, xDest, yDest, true)) {
            path_start(path, moveSpeed, 0, true);
        } else if (instance_place(x, y, obj_enemy) != noone || instance_place(x, y, obj_enemy_laser) != noone) {
            // Check the odd case that we do end up on another enemy, and get stuck
            mp_grid_clear_all(e_grid);
            mp_grid_add_instances(e_grid, obj_wall_inner, false);
            mp_grid_add_instances(e_grid, obj_wall_outer, false);
            xDest = x + random(padding) - random(padding);
            yDest = y + random(padding) - random(padding);
            path = path_add();
            if (mp_grid_path(e_grid, path, x, y, xDest, yDest, true)) {
                path_start(path, moveSpeed, 0, true);    
            }
        }
    }
    move_snap(16, 16)
}

orientation = point_direction(x, y, closest.x, closest.y);
image_angle = orientation;

// Clear collision detection so the old cells aren't marked
mp_grid_clear_all(e_grid);


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Health management
if (hp &lt;= 0) {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attacking
ignoreSight = 0;

getPriority(id);

if (target &amp;&amp; !attacking) {
    if (x == xDest &amp;&amp; y == yDest &amp;&amp; (lineOfSight(x, y, target.x, target.y, false) || ignoreSight)) {
        attacking = 1;
        alarm[0] = 30 / rate;
        
        damageObj(target,id);
        
        image_index = 1;    
        alarm[1] = 5;  
    } else {
        target = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set orientation
if (target) {
    if (instance_exists(target)) {
        orientation = point_direction(x, y, target.x, target.y);
        image_angle = orientation;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw health bar
if (hp &lt; maxHealth) {
    hpDisplay = round((hp/maxHealth) * 100);

    draw_healthbar(x - 8, y + 5, x + 8, y - 5, hpDisplay, c_black, c_red, c_lime, 0, true, true)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>-1</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>-1</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
