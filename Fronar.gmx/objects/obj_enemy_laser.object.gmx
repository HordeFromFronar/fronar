<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enemy_laser</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init

//Initialize variables
moveSpeed = 1;
xDest = x;
yDest = y;
arrived = false;
maxHealth = 100;
hp = 100;
rate = 1;
range = 3;
attacking = 0;
damage = 1;
laser = 0;
armour = 0;
evade = 0;
crit = 0;
target = 0;
drawTarget = 0;
drawTargetX = 0;
drawTargetY = 0;
unstuck = 0;
path = path_add();
alarm[3] = 10;
alarm[4] = 1;

originalSpeed = moveSpeed;
slowed = false;
slowTime = 0;

//Each enemy requires its own grid for collision reasons.
e_gridSize = 16;
e_grid = mp_grid_create(-40,-40,round(room_width/e_gridSize) + 10,
                        round(room_height/e_gridSize) + 10,e_gridSize,e_gridSize);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>moveSpeed = originalSpeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.tacPause) {
    path_end();
    alarm[3] = 1;
}

alarm[4] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pathfinding Enemy

if (!global.tacPause) {
    padding = 32;
    
    // Determine the closest target
    ignoreSight = 0;
    getPriority(id);
    
    closest = target;
    
    // Add collision detection to all other enemies
    var i;
    for (i = 0; i &lt; instance_number(obj_enemy_laser); ++i) {
        enemy_id = instance_find(obj_enemy_laser, i);
        if (enemy_id != id) {
            mp_grid_add_instances(e_grid, enemy_id, false);
        }
    }
    // Add collision detection to players, and walls
    // mp_grid_add_instances(e_grid, obj_char, false)
    mp_grid_add_instances(e_grid, obj_enemy_tank, false);
    mp_grid_add_instances(e_grid, obj_enemy, false);
    mp_grid_add_instances(e_grid, obj_wall_inner, false);
    mp_grid_add_instances(e_grid, obj_wall_outer, false);
    mp_grid_add_instances(e_grid, obj_wall_window, false);
    mp_grid_add_instances(e_grid, obj_door, false);
    
    // Set xDest and yDest to closest available cell by character's x and y
    dist = 1000000;
    dir = 0;
    
    xTarget = closest.x - (closest.x % 32) + 16;
    yTarget = closest.y - (closest.y % 32) + 16;
    
    if (lineOfSight(xTarget + 32, yTarget, xTarget, yTarget, false)) {
        if (point_distance(xTarget + 32, yTarget, x, y) &lt; dist &amp;&amp;
            mp_grid_get_cell(e_grid, (xTarget + 32) / 16 + 2 , (yTarget) / 16 + 2) == 0) {
            xDest = xTarget + 32;
            yDest = yTarget;
            dist = point_distance(xTarget + 32, yTarget, x, y);
        }
    }
    if (lineOfSight(xTarget - 32, yTarget, xTarget, yTarget, false)) {
        if (point_distance(xTarget - 32, yTarget, x, y) &lt; dist &amp;&amp;
            mp_grid_get_cell(e_grid, (xTarget - 32) / 16 + 2 , (yTarget) / 16 + 2) == 0) {
            xDest = xTarget - 32;
            yDest = yTarget;
            dist = point_distance(xTarget - 32, yTarget, x, y);
        }
    }
    if (lineOfSight(xTarget, yTarget + 32, xTarget, yTarget, false) ) {
        if (point_distance(xTarget, yTarget + 32, x, y) &lt; dist &amp;&amp;
            mp_grid_get_cell(e_grid, (xTarget) / 16 + 2 , (yTarget + 32) / 16 + 2) == 0) {
            xDest = xTarget;
            yDest = yTarget + 32;
            dist = point_distance(xTarget, yTarget + 32, x, y);
        }
    }
    if (lineOfSight(xTarget, yTarget - 32, xTarget, yTarget, false)) {
        if (point_distance(xTarget, yTarget - 32, x, y) &lt; dist &amp;&amp;
            mp_grid_get_cell(e_grid, (xTarget) / 16 + 2 , (yTarget - 32) / 16 + 2) == 0) {
            xDest = xTarget;
            yDest = yTarget - 32;
            dist = point_distance(xTarget, yTarget - 32, x, y);
        }
    }
    if (lineOfSight(xTarget + 32, yTarget + 32, xTarget, yTarget, false)) {
        if (point_distance(xTarget + 32, yTarget + 32, x, y) &lt; dist &amp;&amp;
            mp_grid_get_cell(e_grid, (xTarget + 32) / 16 + 2 , (yTarget + 32) / 16 + 2) == 0) {
            xDest = xTarget + 32;
            yDest = yTarget + 32;
            dist = point_distance(xTarget + 32, yTarget + 32, x, y);
        }
    }
    if (lineOfSight(xTarget - 32, yTarget - 32, xTarget, yTarget, false)) {
        if (point_distance(xTarget - 32, yTarget - 32, x, y) &lt; dist &amp;&amp;
            mp_grid_get_cell(e_grid, (xTarget - 32) / 16 + 2 , (yTarget - 32) / 16 + 2) == 0) {
            xDest = xTarget - 32;
            yDest = yTarget - 32;
            dist = point_distance(xTarget - 32, yTarget - 32, x, y);
        }
    }
    if (lineOfSight(xTarget + 32, yTarget - 32, xTarget, yTarget, false)) {
        if (point_distance(xTarget + 32, yTarget - 32, x, y) &lt; dist &amp;&amp;
            mp_grid_get_cell(e_grid, (xTarget + 32) / 16 + 2 , (yTarget - 32) / 16 + 2) == 0) {
            xDest = xTarget + 32;
            yDest = yTarget - 32;
            dist = point_distance(xTarget + 32, yTarget - 32, x, y);
        }
    }
    if (lineOfSight(xTarget - 32, yTarget + 32, xTarget, yTarget, false)) {
        if (point_distance(xTarget - 32, yTarget + 32, x, y) &lt; dist &amp;&amp;
            mp_grid_get_cell(e_grid, (xTarget - 32) / 16 + 2 , (yTarget + 32) / 16 + 2) == 0) {
            xDest = xTarget - 32;
            yDest = yTarget + 32;
            dist = point_distance(xTarget - 32, yTarget + 32, x, y);
        }
    }
    
    //path = path_end();
    
    mp_grid_clear_all(e_grid);
    mp_grid_add_instances(e_grid, obj_wall_inner, false);
    mp_grid_add_instances(e_grid, obj_wall_outer, false);
    mp_grid_add_instances(e_grid, obj_wall_window, false);
    //mp_grid_add_instances(e_grid, obj_door, false);
    
    if(unstuck) {
        for (i = 0; i &lt; instance_number(obj_enemy_laser); ++i) {
            enemy_id = instance_find(obj_enemy_laser, i);
            if (enemy_id != id) {
                mp_grid_add_instances(e_grid, enemy_id, false);
            }
        }
        mp_grid_add_instances(e_grid, obj_enemy, false);
    }
    
    // Move towards the nearest player
    if (x != xDest || y != yDest) {
        // Otherwise keep path finding the optimal path to the player
        if ( point_distance(x, y, xDest, yDest) &lt; moveSpeed) {
            x = xDest;
            y = yDest;
            speed = 0;
        } else if (unstuck) { 
            path_delete(path);
            path = path_add();
            if (mp_potential_path(path, xDest, yDest, moveSpeed, 6, true)) {
                path_start(path, moveSpeed, 0, false);  
            }
        } else {
            path_delete(path);
            path = path_add();
            if (mp_grid_path(e_grid, path, x, y, xDest, yDest, true)) {
                path_start(path, moveSpeed, 0, false);  
            }
            if (instance_place(x, y, obj_enemy)) {
                if (instance_place(x, y, obj_enemy) &lt; id) {
                    path_end();
                    move_snap(16,16); 
                    unstuck = 1;
                    alarm[2] = 30;
                }
            }
            if (instance_place(x, y, obj_enemy_laser)) {
                if (instance_place(x, y, obj_enemy_laser) &lt; id) {
                    path_end();
                    move_snap(16,16); 
                    unstuck = 1;
                    alarm[2] = 30;
                }
            }
            if (instance_place(x, y, obj_enemy_tank)) {
                if (instance_place(x, y, obj_enemy_tank) &lt; id) {
                    path_end();
                    move_snap(16,16); 
                    unstuck = 1;
                    alarm[2] = 30;
                }
            }
        }
    }
    
    // Clear collision detection so the old cells aren't marked
    mp_grid_clear_all(e_grid);
    alarm[3] = 10;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>unstuck = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End attack animation
if (!global.tacPause) {
    laser = 0;
} else {
    alarm[1] = 1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attacking

if (!global.tacPause) {
    getPriority(id);
    
    if (target &amp;&amp; attacking) {
        sight = 0;
        
        xOrigin = x - (x % 32) + 16;
        yOrigin = y - (y % 32) + 16;
        
        xTarget = target.x - (target.x % 32) + 16;
        yTarget = target.y - (target.y % 32) + 16;
        
        for (i = 1; i &lt; range + 1; i++) {
            offset = i * 32;
            if (lineOfSight(xOrigin, yOrigin, xOrigin + offset, yOrigin, false) &amp;&amp; xTarget == xOrigin + offset &amp;&amp; yTarget == yOrigin) {
                sight = 1;
            }
            if (lineOfSight(xOrigin, yOrigin, xOrigin - offset, yOrigin, false) &amp;&amp; xTarget == xOrigin - offset &amp;&amp; yTarget == yOrigin) {
                sight = 1;
            }
            if (lineOfSight(xOrigin, yOrigin, xOrigin, yOrigin + offset, false) &amp;&amp; xTarget == xOrigin &amp;&amp; yTarget == yOrigin + offset) {
                sight = 1;
            }
            if (lineOfSight(xOrigin, yOrigin, xOrigin, yOrigin - offset, false) &amp;&amp; xTarget == xOrigin &amp;&amp; yTarget == yOrigin - offset) {
                sight = 1;
            }
            for (j = range - i; j &gt; 0; j--) {
                offset2 = j * 32;
                if (lineOfSight(xOrigin, yOrigin, xOrigin + offset, yOrigin + offset2, false) &amp;&amp; xTarget == xOrigin + offset &amp;&amp; yTarget == yOrigin + offset2) {
                    sight = 1;
                }
                if (lineOfSight(xOrigin, yOrigin, xOrigin + offset, yOrigin - offset2, false) &amp;&amp; xTarget == xOrigin + offset &amp;&amp; yTarget == yOrigin - offset2) {
                    sight = 1;
                }
                if (lineOfSight(xOrigin, yOrigin, xOrigin - offset, yOrigin + offset2, false) &amp;&amp; xTarget == xOrigin - offset &amp;&amp; yTarget == yOrigin + offset2) {
                    sight = 1;
                }
                if (lineOfSight(xOrigin, yOrigin, xOrigin - offset, yOrigin - offset2, false) &amp;&amp; xTarget == xOrigin - offset &amp;&amp; yTarget == yOrigin - offset2) {
                    sight = 1;
                } 
            }
        }
        if (sight){
            audio_play_sound(snd_Laser, 1, false);
            attacking = 1;
            alarm[0] = 30 / rate;
            drawTarget = target;
            laser = 1;
            alarm[1] = 5;
            
            damageObj(target,id);
        } else {
            attacking = 0;
            target = 0;
        }
    } else {
        attacking = 0;
        target = 0;
    }
}
else {
    alarm[0] = 30 / rate;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start Attacking
getPriority(id);

if (target &amp;&amp; !attacking) {
    sight = 0;
    
    xOrigin = x - (x % 32) + 16;
    yOrigin = y - (y % 32) + 16;
    
    xTarget = target.x - (target.x % 32) + 16;
    yTarget = target.y - (target.y % 32) + 16;
    
    for (i = 1; i &lt; range + 1; i++) {
        offset = i * 32;
        if (lineOfSight(xOrigin, yOrigin, xOrigin + offset, yOrigin, false) &amp;&amp; xTarget == xOrigin + offset &amp;&amp; yTarget == yOrigin) {
            sight = 1;
        }
        if (lineOfSight(xOrigin, yOrigin, xOrigin - offset, yOrigin, false) &amp;&amp; xTarget == xOrigin - offset &amp;&amp; yTarget == yOrigin) {
            sight = 1;
        }
        if (lineOfSight(xOrigin, yOrigin, xOrigin, yOrigin + offset, false) &amp;&amp; xTarget == xOrigin &amp;&amp; yTarget == yOrigin + offset) {
            sight = 1;
        }
        if (lineOfSight(xOrigin, yOrigin, xOrigin, yOrigin - offset, false) &amp;&amp; xTarget == xOrigin &amp;&amp; yTarget == yOrigin - offset) {
            sight = 1;
        }
        for (j = range - i; j &gt; 0; j--) {
            offset2 = j * 32;
            if (lineOfSight(xOrigin, yOrigin, xOrigin + offset, yOrigin + offset2, false) &amp;&amp; xTarget == xOrigin + offset &amp;&amp; yTarget == yOrigin + offset2) {
                sight = 1;
            }
            if (lineOfSight(xOrigin, yOrigin, xOrigin + offset, yOrigin - offset2, false) &amp;&amp; xTarget == xOrigin + offset &amp;&amp; yTarget == yOrigin - offset2) {
                sight = 1;
            }
            if (lineOfSight(xOrigin, yOrigin, xOrigin - offset, yOrigin + offset2, false) &amp;&amp; xTarget == xOrigin - offset &amp;&amp; yTarget == yOrigin + offset2) {
                sight = 1;
            }
            if (lineOfSight(xOrigin, yOrigin, xOrigin - offset, yOrigin - offset2, false) &amp;&amp; xTarget == xOrigin - offset &amp;&amp; yTarget == yOrigin - offset2) {
                sight = 1;
            } 
        }
    }
    if (sight){
        attacking = 1;
        alarm[0] = 30 / rate;
        drawTarget = target;
        laser = 1;
        alarm[1] = 5;
        
        damageObj(target,id);
    } else {
        target = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Health management
if (hp &lt;= 0) {
    audio_play_sound(snd_Borgi_Die, 1, false);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set orientation
if (target) {
    if (instance_exists(target)) {
        orientation = point_direction(x, y, target.x, target.y);
        image_angle = orientation;
    }
} else {
    image_angle = direction;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Slowing movement
if (slowed &amp;&amp; slowTime &gt; 0) {
    alarm[5] = slowTime * room_speed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw laser
if (laser) {
    if (instance_exists(drawTarget)) {
        draw_set_color(c_red);
        draw_line(x,y,drawTarget.x,drawTarget.y);
        draw_set_color(c_black);
        
        drawTargetX = drawTarget.x;
        drawTargetY = drawTarget.y;
    } else {
        draw_set_color(c_red);
        draw_line(x,y,drawTargetX,drawTargetY);
        draw_set_color(c_black);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw health bar
if (hp &lt; maxHealth) {
    hpDisplay = round((hp/maxHealth) * 100);

    draw_healthbar(x - 6, y + 3, x + 6, y - 3, hpDisplay, c_black, c_red, c_lime, 0, true, true)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
